// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "darwin-arm64", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 权限表类型枚举
enum PermissionType {
  MENU
  BUTTON
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String?  @unique
  nickname  String?
  salt      String   @default("")
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  enable    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("co_users")
}

model Role {
  id          Int                      @id @default(autoincrement())
  name        String                   @unique @map("role_name")
  description String?
  user        User[]
  permissions PermissionRelationRole[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt

  @@map("co_roles")
}

model Permission {
  id          Int                      @id @default(autoincrement())
  name        String                   @unique @map("permission_name") // 权限名字
  order       Int?
  parentId    Int?
  parent      Permission?              @relation("parent_children", fields: [parentId], references: [id])
  children    Permission[]             @relation("parent_children")
  icon        String?
  component   String? // 组件路径
  path        String? // 路由
  type        PermissionType           @default(MENU) // 权限类型，菜单或按钮
  status      Int                      @default(1) // 状态，1：启用，0：禁用
  description String?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  roles       PermissionRelationRole[]

  @@map("co_permissions")
}

// 角色&权限中间表
model PermissionRelationRole {
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@id([permissionId, roleId])
  @@map("co_permission_relation_role")
}
