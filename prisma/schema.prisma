// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum NodeType {
  DIRECTORY // 目录
  MENU // 页面
  ACTION // 操作
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String?
  nickname  String?
  salt      String   @default("")
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  enable    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("co_users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  user        User[]
  menus       Menu[]   @relation("menu_to_role")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("co_roles")
}

model Menu {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(50)
  locale    String?  @default("") @db.VarChar(50) // 国际化
  icon      String?  @db.VarChar(50) // 图标
  code      String   @unique // 权限编码唯一标识
  sort      Int
  type      NodeType @default(DIRECTORY) // 节点类型，目录、页面、操作
  path      String?  @default("")
  parentId  Int?
  parent    Menu?    @relation("parent_children", fields: [parentId], references: [id])
  children  Menu[]   @relation("parent_children")
  roles     Role[]   @relation("menu_to_role")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("co_menus")
}

// model Permissions {
//   id                     Int                      @id @default(autoincrement())
//   name                   String                   @unique
//   order                  Int?
//   parentId               Int?
//   parent                 Permissions?             @relation("parent_children", fields: [parentId], references: [id])
//   children               Permissions[]            @relation("parent_children")
//   icon                   String?
//   component              String? // 组件路径
//   path                   String? // 路由
//   type                   PermissionType           @default(MENU) // 权限类型，菜单或按钮
//   status                 Int                      @default(1) // 状态，1：启用，0：禁用
//   description            String?
//   createdAt              DateTime                 @default(now())
//   updatedAt              DateTime                 @updatedAt
//   PermissionRelationRole PermissionRelationRole[]

//   @@map("co_permissions")
// }

// 角色&权限中间表
// model PermissionRelationRole {
//   permissionId Int
//   permission   Permissions @relation(fields: [permissionId], references: [id])
//   roleId       Int
//   role         Role        @relation(fields: [roleId], references: [id])
//   createdAt    DateTime    @default(now())

//   @@id([permissionId, roleId])
//   @@map("co_permission_relation_role")
// }
